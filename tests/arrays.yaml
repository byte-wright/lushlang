order: 3
name: Arrays
tests:
  - name: declaration
    description: Arrays are declared like [a, b, c]
    code: |
      import "strings"

      names = ["albert", "boris", "chad"]
      println(names[2], names[1], names[0])

      numbers = [2, 4, 6]
      println(numbers[1] + numbers[2] * numbers[0])

      println(strings.join(append([]string, "foo", "bar"), "."))
    expected: |
      chad boris albert
      16
      foo.bar

  - name: append
    description: Add elements to an array
    code: |
      import "strings"

      names = ["albert", "anke"]
      names = append(names, "boris", "chad", "the mil'le\"r")
      println(strings.join(names, "-"))
    expected: |
      albert-anke-boris-chad-the mil'le"r

  - name: join array
    description: The join method joins an array into a string.
    code: |
      import "strings"

      names = ["albert", "boris", "chad", "the mil'le\"r"]
      println(strings.join(names, ", "))
    expected: |
      albert, boris, chad, the mil'le"r

  - name: slice array
    description: Arrays can be sliced
    code: |
      import "strings"

      names = ["albert", "boris", "chad", "dario", "elmir"]
      sliced = names[1:4]
      println(strings.join(sliced, ", "))

      println(strings.join(["a", "r", "g", "h", "o"][2:4], "_"))
    expected: |
      boris, chad, dario
      g_h

  - name: array length
    description: Arrays can be sliced
    code: |
      import "strings"

      names = ["albert", "boris", "chad", "dario", "elmir"]
      println(len(names))
      println(len(append(names, "fifi")))
    expected: |
      5
      6
